mybatis.mapper-locations=classpath:mapper/*.xml
spring.application.name=springbootdemotest
#spring.datasource.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.username=root
#spring.datasource.password=root
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/Test20230105?serverTimezone=GMT%2B8
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

##指定shardingjdbc的数据源名称
#spring.shardingsphere.datasource.names=u1
##指定数据源信息
#spring.shardingsphere.datasource.u1.type=com.zaxxer.hikari.HikariDataSource
#spring.shardingsphere.datasource.u1.driver-class-name = com.mysql.cj.jdbc.Driver
#spring.shardingsphere.datasource.u1.jdbc-url =jdbc:mysql://localhost:3306/Test20230105?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
#spring.shardingsphere.datasource.u1.username =root
#spring.shardingsphere.datasource.u1.password =root
##指定主键名称和采取的算法
#spring.shardingsphere.sharding.tables.user.key-generator.column=id
#spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
##指定真实的数据节点
#spring.shardingsphere.sharding.tables.user.actual-data-nodes =u1.user_$->{1..2}
## 指定user表的分片策略，分片策略包括分片键和分片算法
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column =id
#spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression =user_$->{id%2 + 1}

#(2)分片规则修改
#由于数据库拆分了两个，这里需要配置两个数据源。
#分库需要配置分库的策略，和分表策略的意义类似，通过分库策略实
#现数据操作针对分库的数据库进行操作。

# 定义多个数据源u1u2
spring.shardingsphere.datasource.names = u1,u2
spring.shardingsphere.datasource.u1.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.u1.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.u1.url=jdbc:mysql://localhost:3306/test20230105?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
spring.shardingsphere.datasource.u1.username = root
spring.shardingsphere.datasource.u1.password = root

spring.shardingsphere.datasource.u2.type = com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.u2.driver-class-name = com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.u2.url=jdbc:mysql://localhost:3306/test20230112?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
spring.shardingsphere.datasource.u2.username = root
spring.shardingsphere.datasource.u2.password = root
# 分库策略，以user_id为分片键，分片策略为id % 2 + 1，id为偶数操作u1数据源，否则操作u2。
spring.shardingsphere.sharding.tables.user.database-strategy.inline.sharding-column=database_id
spring.shardingsphere.sharding.tables.user.database-strategy.inline.algorithm-expression=u$->{database_id % 2 + 1}
# 分表策略，以id为分片键，分片策略为id % 2 + 1，id为偶数操作user_1，否则操作user_2。
spring.shardingsphere.sharding.tables.user.table-strategy.inline.sharding-column =id
spring.shardingsphere.sharding.tables.user.table-strategy.inline.algorithm-expression =user_$->{id%2 + 1}
#指定所有存在的数据节点[u1.user_1,u1.user_2,u2.user_1,u2.user_2],查询的时候会根据分片键进行查询真实的数据库和表，但是如果查询条件不包含分片键的话，就会根据该配置广播路由到不同的库和不同的表中。
spring.shardingsphere.sharding.tables.user.actual-data-nodes =u$->{1..2}.user_$->{1..2}
#指定主键和主键策略
spring.shardingsphere.sharding.tables.user.key-generator.column=id
spring.shardingsphere.sharding.tables.user.key-generator.type=SNOWFLAKE
#sharding-jdbc的sql日志输出
spring.shardingsphere.props.sql.show = true